#!/usr/bin/env node

/**
 * Script para migrar el modelo de productos para permitir mismo producto en diferentes categor√≠as
 */

const mongoose = require('mongoose');
const Producto = require('../models/Producto');
const CatalogoProducto = require('../models/CatalogoProducto');

require('dotenv').config();

const DB_CONNECTION = process.env.DB_CONNECTION || 'mongodb://localhost:27017/loginSystem';

async function conectarDB() {
  try {
    await mongoose.connect(DB_CONNECTION);
    console.log('‚úÖ Conectado a MongoDB');
  } catch (error) {
    console.error('‚ùå Error conectando a MongoDB:', error);
    process.exit(1);
  }
}

async function migrarEsquema() {
  console.log('\nüîÑ === MIGRACI√ìN DEL ESQUEMA DE PRODUCTOS ===\n');

  try {
    // 1. Eliminar el √≠ndice √∫nico problem√°tico en codigoProducto
    console.log('1Ô∏è‚É£ Eliminando √≠ndice √∫nico en codigoProducto...');
    try {
      await Producto.collection.dropIndex('codigoProducto_1');
      console.log('   ‚úÖ √çndice √∫nico eliminado');
    } catch (error) {
      if (error.code === 27) {
        console.log('   ‚ÑπÔ∏è  √çndice no existe, continuando...');
      } else {
        throw error;
      }
    }

    // 2. Crear √≠ndice compuesto √∫nico para catalogoProductoId + categoryId
    console.log('\\n2Ô∏è‚É£ Creando √≠ndice compuesto √∫nico (catalogoProductoId + categoryId)...');
    try {
      await Producto.collection.createIndex(
        { catalogoProductoId: 1, categoryId: 1 },
        { 
          unique: true,
          name: 'catalogoProducto_categoria_unique'
        }
      );
      console.log('   ‚úÖ √çndice compuesto creado exitosamente');
    } catch (error) {
      if (error.code === 85) {
        console.log('   ‚ÑπÔ∏è  √çndice ya existe, continuando...');
      } else {
        throw error;
      }
    }

    // 3. Crear √≠ndice normal (no √∫nico) para codigoProducto para b√∫squedas
    console.log('\\n3Ô∏è‚É£ Creando √≠ndice normal para codigoProducto...');
    try {
      await Producto.collection.createIndex(
        { codigoProducto: 1 },
        { name: 'codigoProducto_search' }
      );
      console.log('   ‚úÖ √çndice de b√∫squeda creado');
    } catch (error) {
      if (error.code === 85) {
        console.log('   ‚ÑπÔ∏è  √çndice ya existe, continuando...');
      } else {
        throw error;
      }
    }

    // 4. Verificar los nuevos √≠ndices
    console.log('\\n4Ô∏è‚É£ Verificando √≠ndices actuales:');
    const indexes = await Producto.collection.indexes();
    indexes.forEach(index => {
      const uniqueText = index.unique ? ' (√öNICO)' : '';
      console.log(`   - ${index.name}: ${JSON.stringify(index.key)}${uniqueText}`);
    });

    // 5. Limpiar productos existentes que puedan causar conflictos
    console.log('\\n5Ô∏è‚É£ Limpiando productos existentes...');
    const productosEliminados = await Producto.deleteMany({});
    console.log(`   ‚úÖ Eliminados ${productosEliminados.deletedCount} productos para empezar limpio`);

    console.log('\\n‚úÖ === MIGRACI√ìN COMPLETADA ===');
    console.log('\\nüìã Nuevas reglas:');
    console.log('   - ‚úÖ Mismo producto puede estar en diferentes categor√≠as');
    console.log('   - ‚úÖ Cada combinaci√≥n (producto + categor√≠a) debe ser √∫nica');
    console.log('   - ‚úÖ Ejemplo: Pizza Hawaiana en "Familiar" y "Personal"');

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    throw error;
  }
}

async function probarNuevaLogica() {
  console.log('\\nüß™ === PROBANDO NUEVA L√ìGICA ===\\n');

  try {
    // Verificar que tenemos productos en el cat√°logo para probar
    const catalogos = await CatalogoProducto.find({ activo: true }).limit(3);
    
    if (catalogos.length === 0) {
      console.log('   ‚ö†Ô∏è  No hay productos en el cat√°logo para probar');
      return;
    }

    console.log('üìã Productos disponibles para prueba:');
    catalogos.forEach((c, index) => {
      console.log(`   ${index + 1}. ${c.codigoproducto} - ${c.nombre}`);
    });

    console.log('\\n‚úÖ La nueva l√≥gica est√° lista para usar');
    console.log('\\nüéØ Ahora puedes:');
    console.log('   1. Usar el modal para crear productos');
    console.log('   2. Seleccionar el mismo producto del cat√°logo para diferentes categor√≠as');
    console.log('   3. Cada combinaci√≥n tendr√° su propio precio y cantidad');

  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error);
    throw error;
  }
}

async function main() {
  try {
    await conectarDB();
    await migrarEsquema();
    await probarNuevaLogica();
    
  } catch (error) {
    console.error('‚ùå Error en el proceso:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('\\nüîå Conexi√≥n cerrada');
    process.exit(0);
  }
}

// Ejecutar solo si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = { migrarEsquema, probarNuevaLogica };
