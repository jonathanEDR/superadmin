const mongoose = require('mongoose');
const CatalogoProducto = require('./models/CatalogoProducto');
const Producto = require('./models/Producto');
const InventarioProducto = require('./models/InventarioProducto');
const Inventario = require('./models/Inventario');

/**
 * Script de Diagn√≥stico y Reparaci√≥n Urgente del M√≥dulo de Inventario
 * Identifica y corrige referencias rotas detectadas en logs
 */

class DiagnosticoInventario {
  constructor() {
    this.problemas = {
      catalogoRotos: [],
      productosHuerfanos: [],
      inventarioInconsistente: [],
      indicesProblematicos: []
    };
    this.estadisticas = {
      catalogoTotal: 0,
      productosTotal: 0,
      inventarioTotal: 0,
      problemasDetectados: 0,
      reparacionesRealizadas: 0
    };
  }

  async conectarDB() {
    try {
      if (mongoose.connection.readyState === 0) {
        const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/superadmin';
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Conectado a MongoDB para diagn√≥stico');
      }
    } catch (error) {
      console.error('‚ùå Error al conectar a MongoDB:', error);
      throw error;
    }
  }

  async diagnosticoCompleto() {
    console.log('üîç INICIANDO DIAGN√ìSTICO COMPLETO DEL M√ìDULO DE INVENTARIO\n');
    
    try {
      await this.conectarDB();
      
      // 1. Estad√≠sticas generales
      await this.obtenerEstadisticas();
      
      // 2. Identificar referencias rotas espec√≠ficas
      await this.identificarCatalogoRoto();
      
      // 3. Validar consistencia entre modelos
      await this.validarConsistenciaModelos();
      
      // 4. Identificar productos hu√©rfanos
      await this.identificarProductosHuerfanos();
      
      // 5. Validar inventario inconsistente
      await this.validarInventarioInconsistente();
      
      // 6. Mostrar resumen
      this.mostrarResumenDiagnostico();
      
    } catch (error) {
      console.error('‚ùå Error durante el diagn√≥stico:', error);
    }
  }

  async obtenerEstadisticas() {
    console.log('üìä OBTENIENDO ESTAD√çSTICAS GENERALES...\n');
    
    this.estadisticas.catalogoTotal = await CatalogoProducto.countDocuments();
    this.estadisticas.productosTotal = await Producto.countDocuments();
    this.estadisticas.inventarioTotal = await InventarioProducto.countDocuments();
    
    console.log(`üì¶ Cat√°logo de Productos: ${this.estadisticas.catalogoTotal}`);
    console.log(`üè∑Ô∏è  Productos Registrados: ${this.estadisticas.productosTotal}`);
    console.log(`üìã Entradas de Inventario: ${this.estadisticas.inventarioTotal}`);
    
    // Verificar si la base de datos est√° completamente vac√≠a
    if (this.estadisticas.catalogoTotal === 0 && this.estadisticas.productosTotal === 0 && this.estadisticas.inventarioTotal === 0) {
      console.log('\n‚ö†Ô∏è  BASE DE DATOS APARENTEMENTE VAC√çA');
      console.log('   Esto puede indicar:');
      console.log('   1. Nueva instalaci√≥n sin datos');
      console.log('   2. Problema de conexi√≥n a la base correcta');
      console.log('   3. Colecciones con nombres diferentes\n');
      
      // Listar todas las colecciones disponibles
      const collections = await mongoose.connection.db.listCollections().toArray();
      console.log('üìÇ Colecciones disponibles en la base de datos:');
      collections.forEach(col => {
        console.log(`   - ${col.name}`);
      });
      console.log();
    }
  }

  async identificarCatalogoRoto() {
    console.log('üîç IDENTIFICANDO REFERENCIAS ROTAS EN CAT√ÅLOGO...\n');
    
    // Problema espec√≠fico detectado en logs
    const productoProblem√°tico = '688431565042249698785120';
    console.log(`üéØ Analizando producto problem√°tico: ${productoProblem√°tico}`);
    
    // Buscar en todos los modelos
    const enCatalogo = await CatalogoProducto.findOne({
      $or: [
        { _id: productoProblem√°tico },
        { codigoproducto: productoProblem√°tico },
        { nombre: { $regex: productoProblem√°tico, $options: 'i' } }
      ]
    });
    
    const enProductos = await Producto.findOne({
      $or: [
        { _id: productoProblem√°tico },
        { catalogoProductoId: productoProblem√°tico },
        { codigoProducto: productoProblem√°tico }
      ]
    });
    
    const enInventario = await InventarioProducto.find({
      $or: [
        { catalogoProductoId: productoProblem√°tico },
        { productoId: productoProblem√°tico }
      ]
    });

    console.log(`   - En Cat√°logo: ${enCatalogo ? '‚úÖ Encontrado' : '‚ùå NO ENCONTRADO'}`);
    console.log(`   - En Productos: ${enProductos ? '‚úÖ Encontrado' : '‚ùå NO ENCONTRADO'}`);
    console.log(`   - En Inventario: ${enInventario.length} registros\n`);

    if (enCatalogo) {
      console.log('üìã Datos del cat√°logo encontrado:');
      console.log(`   - ID: ${enCatalogo._id}`);
      console.log(`   - C√≥digo: ${enCatalogo.codigoproducto}`);
      console.log(`   - Nombre: ${enCatalogo.nombre}`);
    }

    if (enProductos) {
      console.log('üè∑Ô∏è Datos del producto encontrado:');
      console.log(`   - ID: ${enProductos._id}`);
      console.log(`   - C√≥digo: ${enProductos.codigoProducto}`);
      console.log(`   - Cat√°logoID: ${enProductos.catalogoProductoId}`);
    }

    // Buscar todos los cat√°logos rotos
    const catalogosRotos = await this.buscarCatalogosRotos();
    this.problemas.catalogoRotos = catalogosRotos;
    
    console.log(`üö® Total de referencias rotas encontradas: ${catalogosRotos.length}\n`);
  }

  async buscarCatalogosRotos() {
    console.log('üîé Buscando todas las referencias rotas...\n');
    
    const productos = await Producto.find({});
    const catalogosRotos = [];
    
    for (const producto of productos) {
      if (producto.catalogoProductoId) {
        const catalogoExiste = await CatalogoProducto.findById(producto.catalogoProductoId);
        if (!catalogoExiste) {
          catalogosRotos.push({
            productoId: producto._id,
            codigoProducto: producto.codigoProducto,
            catalogoRotoId: producto.catalogoProductoId,
            tipo: 'CATALOGO_NO_EXISTE'
          });
        }
      }
    }
    
    return catalogosRotos;
  }

  async validarConsistenciaModelos() {
    console.log('üîç VALIDANDO CONSISTENCIA ENTRE MODELOS...\n');
    
    // Verificar InventarioProducto con referencias rotas
    const inventariosProblematicos = [];
    const inventarios = await InventarioProducto.find({}).limit(100);
    
    for (const inventario of inventarios) {
      const problemas = [];
      
      // Verificar catalogoProductoId
      if (inventario.catalogoProductoId) {
        const catalogoExiste = await CatalogoProducto.findById(inventario.catalogoProductoId);
        if (!catalogoExiste) {
          problemas.push('CATALOGO_NO_EXISTE');
        }
      }
      
      // Verificar productoId
      if (inventario.productoId) {
        const productoExiste = await Producto.findById(inventario.productoId);
        if (!productoExiste) {
          problemas.push('PRODUCTO_NO_EXISTE');
        }
      }
      
      if (problemas.length > 0) {
        inventariosProblematicos.push({
          inventarioId: inventario._id,
          numeroEntrada: inventario.numeroEntrada,
          problemas: problemas,
          catalogoId: inventario.catalogoProductoId,
          productoId: inventario.productoId
        });
      }
    }
    
    this.problemas.inventarioInconsistente = inventariosProblematicos;
    console.log(`üö® Inventarios con problemas: ${inventariosProblematicos.length}\n`);
    
    // Mostrar los primeros 5 problemas
    inventariosProblematicos.slice(0, 5).forEach((item, index) => {
      console.log(`   ${index + 1}. Entrada: ${item.numeroEntrada}`);
      console.log(`      Problemas: ${item.problemas.join(', ')}`);
      console.log(`      Cat√°logoID: ${item.catalogoId}`);
      console.log(`      ProductoID: ${item.productoId}\n`);
    });
  }

  async identificarProductosHuerfanos() {
    console.log('üîç IDENTIFICANDO PRODUCTOS HU√âRFANOS...\n');
    
    try {
      // Buscar productos con diferentes tipos de problemas en catalogoProductoId
      const productosHuerfanos = await Producto.find({
        $or: [
          { catalogoProductoId: { $exists: false } },
          { catalogoProductoId: null }
        ]
      });
      
      // Buscar por separado los que tienen string vac√≠o (para evitar cast error)
      const productosStringVacio = await Producto.find({
        catalogoProductoId: ""
      }).catch(() => []); // Si falla el cast, retorna array vac√≠o
      
      // Combinar resultados
      const todosHuerfanos = [...productosHuerfanos, ...productosStringVacio];
      
      this.problemas.productosHuerfanos = todosHuerfanos;
      console.log(`üë§ Productos sin cat√°logo: ${todosHuerfanos.length}`);
      console.log(`   - Sin campo catalogoProductoId: ${productosHuerfanos.length}`);
      console.log(`   - Con string vac√≠o: ${productosStringVacio.length}\n`);
      
      if (todosHuerfanos.length > 0) {
        console.log('Primeros 3 productos hu√©rfanos:');
        todosHuerfanos.slice(0, 3).forEach((prod, index) => {
          console.log(`   ${index + 1}. ID: ${prod._id}`);
          console.log(`      C√≥digo: ${prod.codigoProducto || 'Sin c√≥digo'}`);
          console.log(`      Nombre: ${prod.nombreProducto || 'Sin nombre'}`);
          console.log(`      Cat√°logoID: ${prod.catalogoProductoId || 'VAC√çO'}\n`);
        });
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è  Error al buscar productos hu√©rfanos: ${error.message}`);
      this.problemas.productosHuerfanos = [];
    }
  }

  async validarInventarioInconsistente() {
    console.log('üîç VALIDANDO INVENTARIO INCONSISTENTE...\n');
    
    // Verificar duplicados por numeroEntrada
    const duplicados = await InventarioProducto.aggregate([
      {
        $group: {
          _id: '$numeroEntrada',
          count: { $sum: 1 },
          docs: { $push: '$$ROOT' }
        }
      },
      {
        $match: { count: { $gt: 1 } }
      }
    ]);
    
    console.log(`üîÑ N√∫meros de entrada duplicados: ${duplicados.length}`);
    
    if (duplicados.length > 0) {
      console.log('Primeros duplicados encontrados:');
      duplicados.slice(0, 3).forEach((dup, index) => {
        console.log(`   ${index + 1}. N√∫mero: ${dup._id} (${dup.count} duplicados)`);
      });
    }
    console.log();
  }

  mostrarResumenDiagnostico() {
    console.log('üìã RESUMEN DEL DIAGN√ìSTICO');
    console.log('‚ïê'.repeat(50));
    console.log(`üìä Estad√≠sticas generales:`);
    console.log(`   - Cat√°logo: ${this.estadisticas.catalogoTotal} productos`);
    console.log(`   - Productos: ${this.estadisticas.productosTotal} registros`);
    console.log(`   - Inventario: ${this.estadisticas.inventarioTotal} entradas`);
    console.log();
    
    console.log(`üö® Problemas detectados:`);
    console.log(`   - Referencias de cat√°logo rotas: ${this.problemas.catalogoRotos.length}`);
    console.log(`   - Productos hu√©rfanos: ${this.problemas.productosHuerfanos.length}`);
    console.log(`   - Inventarios inconsistentes: ${this.problemas.inventarioInconsistente.length}`);
    console.log();
    
    const totalProblemas = this.problemas.catalogoRotos.length + 
                          this.problemas.productosHuerfanos.length + 
                          this.problemas.inventarioInconsistente.length;
    
    if (totalProblemas > 0) {
      console.log('‚ö†Ô∏è  ACCI√ìN REQUERIDA:');
      console.log('   1. Ejecutar script de reparaci√≥n urgente');
      console.log('   2. Implementar modelo unificado');
      console.log('   3. Migrar datos a nueva estructura');
      console.log();
      console.log('üí° Para reparar inmediatamente, ejecuta:');
      console.log('   node diagnostico-inventario.js --reparar');
    } else {
      console.log('‚úÖ No se encontraron problemas cr√≠ticos');
    }
    
    console.log('‚ïê'.repeat(50));
  }

  async reparacionUrgente() {
    console.log('üîß INICIANDO REPARACI√ìN URGENTE...\n');
    
    let reparaciones = 0;
    
    // 1. Reparar referencias rotas creando cat√°logos faltantes
    console.log('1Ô∏è‚É£ Reparando referencias de cat√°logo rotas...');
    
    for (const problema of this.problemas.catalogoRotos) {
      try {
        // Crear cat√°logo faltante basado en datos del producto
        const producto = await Producto.findById(problema.productoId);
        if (producto) {
          const nuevoCatalogo = new CatalogoProducto({
            codigoproducto: producto.codigoProducto || `AUTO-${Date.now()}`,
            nombre: producto.nombreProducto || 'Producto Sin Nombre',
            descripcion: 'Cat√°logo creado autom√°ticamente durante reparaci√≥n',
            categoria: 'General',
            precio: producto.precio || 0,
            activo: true
          });
          
          await nuevoCatalogo.save();
          
          // Actualizar referencia en producto
          producto.catalogoProductoId = nuevoCatalogo._id;
          await producto.save();
          
          reparaciones++;
          console.log(`   ‚úÖ Reparado: ${producto.codigoProducto}`);
        }
      } catch (error) {
        console.log(`   ‚ùå Error reparando ${problema.productoId}: ${error.message}`);
      }
    }
    
    console.log(`‚úÖ Reparaciones completadas: ${reparaciones}\n`);
    this.estadisticas.reparacionesRealizadas = reparaciones;
  }
}

// Funci√≥n principal
async function ejecutarDiagnostico() {
  const diagnostico = new DiagnosticoInventario();
  
  const args = process.argv.slice(2);
  const reparar = args.includes('--reparar');
  
  try {
    await diagnostico.diagnosticoCompleto();
    
    if (reparar) {
      await diagnostico.reparacionUrgente();
      console.log('üéâ Reparaci√≥n completada. Reinicia el servidor para aplicar cambios.');
    }
    
  } catch (error) {
    console.error('üí• Error fatal:', error);
  } finally {
    if (mongoose.connection.readyState !== 0) {
      await mongoose.disconnect();
      console.log('üîå Desconectado de MongoDB');
    }
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  ejecutarDiagnostico();
}

module.exports = DiagnosticoInventario;